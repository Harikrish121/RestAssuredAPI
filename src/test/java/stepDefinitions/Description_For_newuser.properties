1.   RequestSpecification:

Definition: It represents the specification of the request, allowing you to define how the request should be structured 
(e.g., base URI, headers, query parameters, body, etc.).

Purpose: To encapsulate all details required for the HTTP request before it's sent. This helps reduce code duplication, 
as you can reuse this specification across multiple API requests.
Example Usage:
              RequestSpecification request = new RequestSpecBuilder()
        .setBaseUri("https://api.example.com")
        .setContentType(ContentType.JSON)
        .addHeader("Authorization", "Bearer token")
        .build();

// Using it to send a GET request
Response response = given().spec(request).get("/users");


2. ResponseSpecification:
Definition: It represents the specification of the expected response. You define conditions that you expect the response to meet, 
such as status code, headers, content type, etc.

Purpose: To validate common aspects of the response (like status code, content type, etc.) in a reusable way. It simplifies asserting 
multiple conditions for various API responses.
Example Usage:
              ResponseSpecification responseSpec = new ResponseSpecBuilder()
        .expectStatusCode(200)
        .expectContentType(ContentType.JSON)
        .build();

         // Using it to validate the response
         given().spec(request).get("/users").then().spec(responseSpec);


3. Response:
Definition: This is the actual HTTP response that you get after making the API request. It contains the status code, headers,
and the response body.

Purpose: It allows you to access the content of the HTTP response (status, headers, and body) and perform various assertions 
or extract data from it.
Example Usage:
              
            Response response = given().spec(request).get("/users");

             // Extracting data from the response
             int statusCode = response.getStatusCode();
             String responseBody = response.getBody().asString();
             System.out.println("Status Code: " + statusCode);
              System.out.println("Response Body: " + responseBody);
              
              
RequestSpecification: Used to define how a request is built and sent.
ResponseSpecification: Used to define the expected format and status of the response, helping in validation.
Response: Represents the actual data returned from the API after a request is made, from which you can extract
and validate specific elements.
------------------------------------------------------------------------------------------------------------------------------------------------------
#
RequestSpecBuilder is a part of the RestAssured library in Java, used to create a RequestSpecification object that allows you to 
define the details of an HTTP request in a fluent and flexible way. This builder pattern enables you to chain methods for setting 
different parameters without needing to create a complex constructor or multiple setters.

Key Features of RequestSpecBuilder:
Fluent Interface: Methods return the builder itself, allowing for method chaining.
Configurability: You can set various parameters such as base URI, headers, query parameters, content type, request body, etc.
Reusability: The created RequestSpecification can be reused across multiple requests, promoting DRY (Don't Repeat Yourself) principles.

Common Methods:
setBaseUri(String uri): Sets the base URI for the requests.
setPort(int port): Sets the port number for the requests.
setBasePath(String path): Sets the base path for the requests.
addHeader(String name, String value): Adds a header to the request.
addQueryParam(String name, String value): Adds a query parameter to the request.
setContentType(ContentType contentType): Sets the content type of the request (e.g., JSON, XML).
setBody(Object body): Sets the body of the request, which can be a JSON object or any other type of payload.
build(): Builds and returns a RequestSpecification object with the specified settings.


RequestSpecification requestSpec = new RequestSpecBuilder()
                .setBaseUri("https://api.example.com")          // Set base URI
                .setPort(443)                                   // Set port (optional, default is 80 for HTTP)
                .setBasePath("/v1/users")                       // Set base path
                .addHeader("Authorization", "Bearer your_token") // Add Authorization header
                .setContentType(ContentType.JSON)               // Set Content-Type to JSON
                .build();                                       // Build the RequestSpecification

        // Making a GET request using the created RequestSpecification
        String response = RestAssured.given()              // Start the request
                .spec(requestSpec)                          // Apply the RequestSpecification
                .queryParam("active", true)                // Adding a query parameter
                .when()                                     // When the request is sent
                .get()                                      // Make a GET request
                .then()                                     // Start the response validation
                .statusCode(200)                            // Check for a 200 OK status
                .extract().body().asString();              // Extract the response body as a string

        // Printing the response
        System.out.println("Response: " + response);


#Getters and Setters: They provide controlled access to the fields of a class, supporting encapsulation.
Serialization: The process of converting a Java object into a JSON string.
Deserialization: The process of converting a JSON string back into a Java object.
Jackson Library: Used for easy serialization and deserialization with JSON in Java, and requires adding the Jackson dependency to your project.
Maven Dependency
